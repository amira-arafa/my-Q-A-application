{"version":3,"sources":["Auth.js","NavBar.js","Question.js","Questions.js","callback.js","App.js","serviceWorker.js","index.js"],"names":["auth0Client","Auth","Object","classCallCheck","this","auth0","WebAuth","domain","audience","clientID","redirectUri","responseType","scope","getProfile","bind","handleAuthentication","isAuthenticated","signIn","signOut","profile","idToken","Date","getTime","expiresAt","authorize","_this","Promise","resolve","reject","parseHash","err","authResult","idTokenPayload","exp","withRouter","props","react_default","a","createElement","className","react_router_dom","to","onClick","name","history","replace","Question","possibleConstructorReturn","getPrototypeOf","call","state","question","params","match","axios","get","concat","questionId","data","setState","body","Component","Questions","questions","map","que","key","id","Callback","App","src_NavBar","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b0e345c1.chunk.js","sourcesContent":["import auth0 from 'auth0-js';\r\n\r\nclass Auth {\r\n  constructor() {\r\n      //getting information about user and token from auth0\r\n    this.auth0 = new auth0.WebAuth({\r\n        domain: 'dev--yzyljqx.auth0.com',\r\n            audience: 'https://dev--yzyljqx.auth0.com/userinfo',\r\n            clientID: 'uz0oB6GhhHRx0rM7PQ5gfCFkaHzAOWDj',\r\n            redirectUri: 'http://localhost:3000/callback',\r\n            responseType: 'id_token',\r\n            scope: 'openid profile'\r\n    });\r\n\r\n    this.getProfile = this.getProfile.bind(this);\r\n    this.handleAuthentication = this.handleAuthentication.bind(this);\r\n    this.isAuthenticated = this.isAuthenticated.bind(this);\r\n    this.signIn = this.signIn.bind(this);\r\n    this.signOut = this.signOut.bind(this);\r\n  }\r\n  //methods to get info about user profile\r\n  getProfile() {\r\n    return this.profile;\r\n  }\r\n  //method to get the token of the user\r\n  getIdToken() {\r\n    return this.idToken;\r\n  }\r\n  //this method check whether the user is authenticated or not\r\n  isAuthenticated() {\r\n    return new Date().getTime() < this.expiresAt;\r\n  }\r\n  //method to make user signed in\r\n  signIn() {\r\n    this.auth0.authorize();\r\n  }\r\n  //promise based method to get the token and profile of user if authenticated and get error if not\r\n  handleAuthentication() {\r\n    return new Promise((resolve, reject) => {\r\n      this.auth0.parseHash((err, authResult) => {\r\n        if (err) return reject(err);\r\n        if (!authResult || !authResult.idToken) {\r\n          return reject(err);\r\n        }\r\n        this.idToken = authResult.idToken;\r\n        this.profile = authResult.idTokenPayload;\r\n        this.expiresAt = authResult.idTokenPayload.exp * 1000;\r\n        resolve();\r\n      });\r\n    })\r\n  }\r\n  //sign out method to clear any user information\r\n  signOut() {\r\n    this.idToken = null;\r\n    this.profile = null;\r\n    this.expiresAt = null;\r\n  }\r\n}\r\n\r\nconst auth0Client = new Auth();\r\n\r\nexport default auth0Client;\r\n","import React from 'react';\r\nimport {Link, withRouter} from 'react-router-dom';\r\nimport auth0Client from './Auth';\r\n\r\nfunction NavBar(props) {\r\n    //this method to allow user to signout and then go to home page\r\n  const signOut = () => {\r\n    auth0Client.signOut();\r\n    props.history.replace('/');\r\n  };\r\n    return(\r\n    //check if the user authenticated then signout btn and user name are displayed and if not sign in btn is displayed\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark row\">\r\n            <Link className=\"navbar-brand p-3 col-sm-9\" to=\"/\">Go to Q&A section</Link>\r\n            {!auth0Client.isAuthenticated() && <button className=\"btn btn-primary offset-2\" onClick={auth0Client.signIn}> sign in </button>}\r\n            {auth0Client.isAuthenticated()&&\r\n                <div className=\"col\">\r\n                    <label className=\"text-white pt-2 pr-2 \">{auth0Client.getProfile().name}</label>\r\n                    <button className=\"btn btn-primary\" onClick={()=>{signOut()}}>sign out</button>\r\n                </div>\r\n            }\r\n        </nav>\r\n    );\r\n}\r\nexport default withRouter(NavBar);","import React, {Component} from 'react';\r\nimport axios from 'axios';\r\n\r\nclass Question extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      question: null,\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    //question props are placed params which is sent in the url (the id from it) to get request from certain question \r\n    const { match: { params } } = this.props;\r\n    //the const question has the data of certain question \r\n    const question = (await axios.get(`https://jsonplaceholder.typicode.com/comments/${params.questionId}`)).data;\r\n    \r\n    this.setState({\r\n      question,\r\n    });\r\n  }\r\n\r\n    render(){\r\n        return(\r\n        //check if the const question has no value so keep loading if has value display it\r\n            <div>\r\n                {this.state.question===null&&<p>loading...</p>}\r\n                {this.state.question&& \r\n                     <div className=\"card  p-1 m-1 text-center\" >\r\n                    <div className=\"card-body text-dark\">\r\n                      <h5 className=\"card-title\">{this.state.question.name}</h5>\r\n                      <p className=\"card-text\">{this.state.question.body}</p>\r\n                    </div>\r\n                  </div>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nexport default  Question;","import React, {Component} from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\n\r\nclass Questions extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n          questions: null,\r\n        };\r\n      }\r\n\r\n      async componentDidMount() {\r\n        //get all data from backend \r\n        const questions = (await axios.get('https://jsonplaceholder.typicode.com/comments')).data;\r\n        this.setState({\r\n          questions,\r\n        });\r\n      }\r\n\r\n    render(){\r\n        return(\r\n        //check if const questions has no value so keep loading if it has data map over it and display it\r\n            <div className=\"row justify-content-center\">\r\n                {this.state.questions===null && <p>loading the questions...</p>}\r\n                {this.state.questions&& this.state.questions.map(que=>(\r\n                  /* the below link takes info of certain question to question component*/\r\n                    <div className=\"card col-sm-2 p-1 m-1\" key={que.id} >\r\n                    <Link to={`/question/${que.id}`}>\r\n                    <div className=\"card-body text-dark\">\r\n                      <h5 className=\"card-title\">{que.name}</h5>\r\n                      <p className=\"card-text\">{que.body}</p>\r\n                    </div>\r\n                    </Link>\r\n                  </div>\r\n\r\n                )) }\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Questions;","import React, {Component} from 'react';\r\nimport {withRouter} from 'react-router-dom';\r\nimport auth0Client from './Auth';\r\n//this component is rendered when the user sign in to the app \r\nclass Callback extends Component {\r\n//check if user authenticated or not then go to home page if authenticated and get error if not\r\n  async componentDidMount() {\r\n    await auth0Client.handleAuthentication();\r\n    this.props.history.replace('/');\r\n  }\r\n  render() {\r\n    return (\r\n      <p>Loading profile.....</p>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Callback);","import React, { Component } from 'react';\nimport {Route} from 'react-router-dom';\nimport NavBar from './NavBar';\nimport Question from './Question';\nimport Questions from './Questions';\nimport Callback from \"./callback\";\n\nclass App extends Component {\n  render() {\n    //defining different routes\n    return (\n      <div>\n        <NavBar/>\n        <Route exact path='/' component={Questions}/>\n        <Route exact path='/question/:questionId' component={Question}/>\n        <Route exact path='/callback' component={Callback}/>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter} from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}